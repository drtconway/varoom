#include "varoom/kmers/kmer_accumulator.hpp"

#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE kmer_accumulator tests
#include <boost/test/unit_test.hpp>

using namespace std;
using namespace varoom;

namespace // anonymous
{

    const string seq = R"(
>NC_012891.1 Streptococcus dysgalactiae partial sequence
AGTCTGTTTTTTTATTTCTACTTTTCCACAGTCTATTAGAAGCCTCTTCCCTTTATTGTCAAGGTTTTTTATTATTTCCA
CAGGCTGTGGAAAACTTTAGTTAACACTGTGAATTACCTTTCCACAACTTGTGGGTAACTATAACTATTCTTTCAGGTTT
TGTGGAAAACTGACTGGATTTGTGTTAAAATAGTCCTAGAATTATCCACAAGAAGGAACCTAGTATGACTGAAAATGAAC
AAATTTTTTGGAATCGGGTCTTGGAATTAGCTCAGAGCCAATTAAAACAGGCAACGTATGAATTTTTTGTGCATGATGCA
CGCTTATTAAAAGTTGAGAATCATGTGGCAACGATTTACTTAGATCAAATGAAAGAACTCTTTTGGGAAAAAAACCTTAA
AGATGTTATTCTGACAGCTGGTTTTGAAGTTTATAATGCTCAAATTGCCGTTGACTATGTTTTTGAAGAAGATCTGATAA
TTGACCAAAATCAAATCCCAAATAGCCAAAGCTACAATCAGCAAGTAATAACTCCTTTACCTGCTGTTACCTCAGACCTA
AATCCCAAATATAGTTTTGAAAACTTTATTCAGGGTGATGAAAATCGTTGGGCTGTAGCTGCTTCTATAGCAGTAGCTAA
TACACCAGGAACAACCTATAACCCTTTGTTTATCTGGGGAGGGCCTGGACTAGGAAAAACCCATTTGTTAAATGCCATTG
GAAACTCTGTGCTATTAGAAAATCCCAATGCCCGTATAAAGTACATCACCGCTGAAAATTTCATTAATGAATTTGTGATT
CATATTCGTTTAGACACTATGGACGAATTAAAAGAAAAGTTCCGTAATCTCGATTTACTGCTTATTGATGATATCCAATC
GCTGGCGAAGAAAACATTATCTGGAACACAAGAAGAGTTCTTTAATACTTTTAATGCTCTTCATAACAATAATAAACAAA
TCGTTCTAACCAGTGACCGCACACCAGATCACCTTAATGATTTAGAAGATCGATTGGTAACCCGTTTCAAATGGGGCTTA
ACCGTTAATATTACGCCTCCAGATTTTGAAACTCGAGTAGCTATCTTAACGAATAAAATTCAGGAATATAATTTTATTTT
CCCTCAAGATACTATTGAATATCTAGCTGGCCAATTCGATTCCAATGTGAGAGATTTGGAAGGCGCCTTAAAAGACATTA
GTTTGGTTGCTAATTTTAAGCAAATTGATACCATTACGGTTGACGTTGCTGCAGAAGCTATTCGTGCCAGAAAACAAGAT
GGACCTAAAATGACGGTCATTCCAATTGAAGAAATTCAAACGCAGGTTGGAAAATTCTATGACGTCACTGTCAAAGAAAT
TAAGGCAACTAAACGTACGCAAGATATTGTGTTAGCAAGACAAGTCGCTATGTTTTTAGCACGTGAAATGACAGATAATA
GCCTTCCCAAAATTGGTAAGGAATTTGGTGGTAGGGATCATTCCACTGTACTTCATGCCTACAATAAAATCAAAAACATG
ATTAGCCAGGATGAAAGCCTTCGTATTGAAATTGAAACCATCAAAAATAAAATTAAGTAGCTTGTGGACAAGTTCTATTT
TTAGTGACGAGTTATCCACAAGTTGTGAACAGTCTTCTTTCCTTATCCCTACTAGATAAATCAGACTTATCCACGTCATA
CACAAGACCTACTACTACTACTAATTATTATACTTATCAATAAAGGAGTCCTCATGATTCAATTTTCCATAAATCGTACC
CTTTTCATTCAAGCTTTAAATGCCACTAAACGTGGTATTAGCAGTAAAAATGCCATTCCTGTTCTTTCTACCATTAAGAT
TAACGTTAGTTCATCTGATATCACTTTAACTGGTTCAAATGGACAAATTTCAATTGAAAATACCATTCCTGTAAGCAATG
AAAATGCTGGACTATTAATCACATCTCCAGGGTCTATTCTTCTGGAAGCAAATTTCTTTATCAATATTATTTCTAGTTTG
CCAGATGTTAGTTTGGATTTTAAAGAAATTGAACAACATCAAGTTGTTTTAACCAGTGGTAAATCAGAAATTACCTTAAA
AGGAAAAGATGTTGATCAATACCCTCGGTTACAAGAAGTATCAACAGAAAATCCTTTGATCTTAAAAACAAAATTATTAA
AGTCTATTATTGCTGAAACAGCTTTTGCAGCCAGTTTACAAGAAAGTCGTCCTATCTTAACAGGAGTTCATATTGTATTA
AGTAACCATAAAGATTTTAAAGCCGTAGCAACTGACTCTCATCGTATGAGTCAACGTTTAATCACTTTGGATAATACTTC
AGCAGATTTTGATGTGGTTATTCCAAGTAAATCTTTGAGAGAATTTTCAGCAGTATTTACAGATGATATTGAGACTGTTG
AGGTATTTTTCTCACCAAGCCAAATCTTGTTCAGAAGTGAACATATTTCTTTCTATACACGTCTCTTAGAAGGAAATTAT
CCCGATACAGACCGTTTGTTAATGACACAATTTGAGACAGAGGTTGTTTTCAATACCCAATCTCTTCGCCACGCTATGGA
ACGTGCTTTCTTGATTTCGAACGCTACTCAAAATGGTACCGTTAAACTTGAAATTGCTCAAAATCATATTTCAGCTCATG
TTAACTCACCGGAAGTTGGTAAAGTAAACGAAGATTTGGATATTGTTAGTCAATCTGGTAGTGATTTAACTATTAGTTTC
AACCCAACTTACCTTATTGAATCTCTCAAGGCTATCAAGAGTGAAACAGTTAAAATTCATTTCTTGTCACCAGTACGACC
ATTTACCTTGACACCAGGTGATGATGAAGAAAGCTTTATCCAGTTAATCACACCAGTCCGTACCAACTAAAAAGAAAAGG
CTCCCTTTTAGGAGCTTTTTTTGTTATCATAAATGATGAAGATAATAAGAGTGAGGAAAAAAGATGTATCAAATTGGATC
ACTTGTTGAAATGAAAAAACCGCACGCCTGTGTGATTAAAGAGACTGGTAAAAAATCTAATCAATGGAAAGTGCTTAGAG
TAGGAGCTGATATTAAAATTCAATGCACTAACTGTCAGCACATCATTATGATGAGCCGTTACGACTTTGACCGAAAACTA
AAAAAAGTCCTGCAACTTTAGAAATATTGATTTAGTAGGCTTTCTTATACATCTTGCAACCAATACTTGCCTAAATAATT
GTTAGTATGCCTTTGGAAAATCAGGTATTCTAATGTTATCGAAAGAAGAAAGGTGGTCATAGAAAATGACAAAAGTTGCA
GAACAATTAAAGCAATTACGAGTGAAACATCAATTATCTCAAGATGCTCTGGCAGAACAGTTATTTATTTCTCGGCAAGC
CATATCAAAATGAGAAAATGGAGATACAATACCAGATTTGGATAATTTGGTCAGGTTAACTGAAATTTTTGACGTGAGCT
TAGATGAGCTTGTTTTAGCTAAACCACATGAAGTTAAAGTTGAACGCATTTATGAAAACAAACCGCTTGATCTACAAAAA
TACAATAAGCTCTATTGGTTTATTTTTCGAAATATTATTCTGTCTCTACTAATTATTTTAGCTATATTAACTATCTTAGA
AGTTTTAGGGATACCTTTTGTTTCTAATTGGTTAATTTAAAGAAAAGTTGAAGAGTAATATGATGCTAAGCGAACCTGAA
ATTTTCTTATCATCATACCGCTTTTTTCGTTTATTTTCTGTTATAATAGTTGTGATTGAAATTTTGAATGGAGACTTATT
AAAATGGCTTTAACAGCAGGTATTGTGGGCTTACCTAATGTTGGTAAATCAACTTTATTTAATGCAATTACAAAAGCAGG
GGCAGAAGCTGCTAATTATCCTTTTGCAACGATTGATCCTAATGTTGGGATGGTAGAGGTACCAGATGAACGTCTGCAAA
AATTGACAGAGTTGATTACGCCTAAAAAAACCGTTCCAACAACCTTTGAGTTTACTGATATTGCGGGTATTGTTAAAGGA
GCTTCTAAAGGAGAAGGGTTAGGTAATAAATTCTTGGCCAATATCCGTGAAGTAGATGCTATCGTACATGTCGTTCGTGC
TTTTGATGATGAAAATGTTATGCGTGAACAAGGTCGTGAGGATGCTTTCGTGGATCCAATGGCTGATATTGATACTATCA
ACCTTGAATTGATTTTGGCTGATTTAGAGTCTATTAATAAGCGTTATGCGCGTGTGGAAAAAATGGCTCGTACCCAAAAA
GATAAGGATTCCGTGGCAGAATTTGCCGTTCTTGAAAAAATCAAACCTGTCTTAGAAGATGGTAAATCTGCTCGGACAAT
)";

}
// namespace anonymous

BOOST_AUTO_TEST_CASE( cons )
{
    vector<kmer> fwd;
    vector<kmer> rev;
    const size_t K = 8;
    kmers::make(seq, K, fwd, rev);

    map<uint64_t,uint64_t> X;
    for (size_t i = 0; i < fwd.size(); ++i)
    {
        X[fwd[i]] += 1;
    }
    for (size_t i = 0; i < rev.size(); ++i)
    {
        X[rev[i]] += 1;
    }


    kmer_accumulator acc;
    for (size_t i = 0; i < fwd.size(); ++i)
    {
        acc.push_back(fwd[i]);
    }
    acc += rev;

    vector<pair<uint64_t,uint64_t>> itms;
    acc.visit(itms);
    BOOST_CHECK_EQUAL(itms.size(), X.size());

    size_t i = 0;
    auto j = X.begin();
    while (i < itms.size() && j != X.end())
    {
        BOOST_CHECK_EQUAL(itms[i].first, j->first);
        BOOST_CHECK_EQUAL(itms[i].second, j->second);
        ++i;
        ++j;
    }
    BOOST_CHECK_EQUAL(i, itms.size());
    BOOST_CHECK_EQUAL(j == X.end(), true);
}
